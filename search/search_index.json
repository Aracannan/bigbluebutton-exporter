{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview of BigBlueButton Exporter # BigBlueButton Exporter is a Prometheus exporter for BigBlueButton . On a HTTP /metrics request, the exporter will query the BigBlueButton's API for data which it then aggregates and exposes as metrics. Metrics exposed: Number of participants by type (listeners, voice, video) Number of participants by client (HTML5, dial-in, flash) Number of recordings (processing, processed, published, unpublished, deleted) Use Case # BigBlueButton Exporter is the bridge between BigBlueButton and modern monitoring infrastructure such as Prometheus, Alertmanager & Grafana. Using BigBlueButton Exporter you can create stunning dashboards for your BigBlueButton infrastructure and create alert rules when certain things happen. Multiple BigBlueButton servers dashboard # With this dashboard you have a quick overlook over all your BigBlueButton servers and quickly spot anomalies. Single detailed BigBlueButton server dashboard: # This dashboard gives you details about a single BigBlueButton server and it's performance compared to it's resources (CPU utilization and network bandwidth). Note Additional software is required to display server resources i.e. node_exporter or Netdata. We cover this in the installation instructions.","title":"Overview"},{"location":"#overview-of-bigbluebutton-exporter","text":"BigBlueButton Exporter is a Prometheus exporter for BigBlueButton . On a HTTP /metrics request, the exporter will query the BigBlueButton's API for data which it then aggregates and exposes as metrics. Metrics exposed: Number of participants by type (listeners, voice, video) Number of participants by client (HTML5, dial-in, flash) Number of recordings (processing, processed, published, unpublished, deleted)","title":"Overview of BigBlueButton Exporter"},{"location":"#use-case","text":"BigBlueButton Exporter is the bridge between BigBlueButton and modern monitoring infrastructure such as Prometheus, Alertmanager & Grafana. Using BigBlueButton Exporter you can create stunning dashboards for your BigBlueButton infrastructure and create alert rules when certain things happen.","title":"Use Case"},{"location":"#multiple-bigbluebutton-servers-dashboard","text":"With this dashboard you have a quick overlook over all your BigBlueButton servers and quickly spot anomalies.","title":"Multiple BigBlueButton servers dashboard"},{"location":"#single-detailed-bigbluebutton-server-dashboard","text":"This dashboard gives you details about a single BigBlueButton server and it's performance compared to it's resources (CPU utilization and network bandwidth). Note Additional software is required to display server resources i.e. node_exporter or Netdata. We cover this in the installation instructions.","title":"Single detailed BigBlueButton server dashboard:"},{"location":"development/","text":"Development # Building the Website # Requirements # make mkdocs mkdocs-material (pip install mkdocs-material) pip install mkdocs mkdocs-material make docs-dev","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#building-the-website","text":"","title":"Building the Website"},{"location":"development/#requirements","text":"make mkdocs mkdocs-material (pip install mkdocs-material) pip install mkdocs mkdocs-material make docs-dev","title":"Requirements"},{"location":"exporter-user-guide/","text":"Exporter User Guide # Environment Variables # API_SECRET - BigBlueButton API Secret Required: true Use $ bbb-conf --secret on BigBlueButton server to get secret and Base API url API_BASE_URL - Required: true Example: \"https://example.com/bigbluebutton/api/\" Trailing slash is required! DEBUG Required: false Default: false Values: BIND_IP Required: false Default: 0.0.0.0 PORT Required: false Default: 9688 Values: <1 - 65535> Metrics # Gauges: bbb_meetings_participants - Total number of participants in all BigBlueButton meetings bbb_meetings_listeners - Total number of listeners in all BigBlueButton meetings bbb_meetings_voice_participants - Total number of voice participants in all BigBlueButton meetings bbb_meetings_video_participants - Total number of video participants in all BigBlueButton meetings bbb_meetings_participant_clients(type=<client>) - Total number of participants in all BigBlueButton meetings by client (html5|dial-in|flash) bbb_recordings_processing - Total number of BigBlueButton recordings processing bbb_recordings_processed - Total number of BigBlueButton recordings processed bbb_recordings_published - Total number of BigBlueButton recordings published bbb_recordings_unpublished - Total number of BigBlueButton recordings unpublished bbb_recordings_deleted - Total number of BigBlueButton recordings deleted bbb_api_up - 1 if BigBlueButton API is responding 0 otherwise Histograms: bbb_api_latency(labels: endpoint, parameters) - BigBlueButton API call latency buckets: .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 5.0, 7.5, 10.0, INF","title":"Exporter User Guide"},{"location":"exporter-user-guide/#exporter-user-guide","text":"","title":"Exporter User Guide"},{"location":"exporter-user-guide/#environment-variables","text":"API_SECRET - BigBlueButton API Secret Required: true Use $ bbb-conf --secret on BigBlueButton server to get secret and Base API url API_BASE_URL - Required: true Example: \"https://example.com/bigbluebutton/api/\" Trailing slash is required! DEBUG Required: false Default: false Values: BIND_IP Required: false Default: 0.0.0.0 PORT Required: false Default: 9688 Values: <1 - 65535>","title":"Environment Variables"},{"location":"exporter-user-guide/#metrics","text":"Gauges: bbb_meetings_participants - Total number of participants in all BigBlueButton meetings bbb_meetings_listeners - Total number of listeners in all BigBlueButton meetings bbb_meetings_voice_participants - Total number of voice participants in all BigBlueButton meetings bbb_meetings_video_participants - Total number of video participants in all BigBlueButton meetings bbb_meetings_participant_clients(type=<client>) - Total number of participants in all BigBlueButton meetings by client (html5|dial-in|flash) bbb_recordings_processing - Total number of BigBlueButton recordings processing bbb_recordings_processed - Total number of BigBlueButton recordings processed bbb_recordings_published - Total number of BigBlueButton recordings published bbb_recordings_unpublished - Total number of BigBlueButton recordings unpublished bbb_recordings_deleted - Total number of BigBlueButton recordings deleted bbb_api_up - 1 if BigBlueButton API is responding 0 otherwise Histograms: bbb_api_latency(labels: endpoint, parameters) - BigBlueButton API call latency buckets: .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 5.0, 7.5, 10.0, INF","title":"Metrics"},{"location":"getting-started/","text":"Getting Started # First you will need to choose your installation configuration. Installation Type Matrix # Recommended installation type Number of BBB servers Existing Prometheus & Grafana services Do you like Docker? Docker installation (recommended) multiple \u2705 \u2705 All-In-One Monitoring Stack installation 1 \u274c \u2705 Systemd installation multiple \u2705 \u274c If you choose the Docker or Systemd installation type you will have the choice of choosing between node_exporter (recommended) and Netdata for server resource utilization metrics. The metrics that will be collected from one of these two tools will be used together with BigBlueButton exporter metrics in the Server Instance Grafana dashboards. node_exporter installation instructions Netdata installation instructions Grafana Dashboards # Once you have the BigBlueButton exporter installed and one of the two resource utilization metric exporters (node_exporter or Netdata), you can import the appropriate Grafana dashboards. Note We assume a working Grafana-Prometheus installation. If you used the All-In-One Monitoring Stack installation type, you should have connected Prometheus to Grafana during the setup guide. Login to Grafana and in the left menu click on + icon -> import In the JSON field copy/paste the contents of your desired dashboard Dashboard Prerequisites Short description All Servers dashboard BigBlueButton Exporter BBB metrics for all servers in one dashboard Server Instance (node_exporter) dashboard BigBlueButton Exporter, node_exporter BBB server details combined with node_exporter resource metrics Server Instance (netdata) dashboard BigBlueButton Exporter, Netdata BBB server details combined with Netdata resource metrics Installing Grafana on the BigBlueButton Server # If you plan to install Grafana on the BigBlueButton host itself, keep in mind that the standard port for Grafana (3000) is also used by the html5-client of BigBlueButton (see /etc/bigbluebutton/nginx/bbb-html5.nginx ). In this case you will need to change the Grafana port in /etc/grafana/grafana.ini to something else, e.g. 3001).","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"First you will need to choose your installation configuration.","title":"Getting Started"},{"location":"getting-started/#installation-type-matrix","text":"Recommended installation type Number of BBB servers Existing Prometheus & Grafana services Do you like Docker? Docker installation (recommended) multiple \u2705 \u2705 All-In-One Monitoring Stack installation 1 \u274c \u2705 Systemd installation multiple \u2705 \u274c If you choose the Docker or Systemd installation type you will have the choice of choosing between node_exporter (recommended) and Netdata for server resource utilization metrics. The metrics that will be collected from one of these two tools will be used together with BigBlueButton exporter metrics in the Server Instance Grafana dashboards. node_exporter installation instructions Netdata installation instructions","title":"Installation Type Matrix"},{"location":"getting-started/#grafana-dashboards","text":"Once you have the BigBlueButton exporter installed and one of the two resource utilization metric exporters (node_exporter or Netdata), you can import the appropriate Grafana dashboards. Note We assume a working Grafana-Prometheus installation. If you used the All-In-One Monitoring Stack installation type, you should have connected Prometheus to Grafana during the setup guide. Login to Grafana and in the left menu click on + icon -> import In the JSON field copy/paste the contents of your desired dashboard Dashboard Prerequisites Short description All Servers dashboard BigBlueButton Exporter BBB metrics for all servers in one dashboard Server Instance (node_exporter) dashboard BigBlueButton Exporter, node_exporter BBB server details combined with node_exporter resource metrics Server Instance (netdata) dashboard BigBlueButton Exporter, Netdata BBB server details combined with Netdata resource metrics","title":"Grafana Dashboards"},{"location":"getting-started/#installing-grafana-on-the-bigbluebutton-server","text":"If you plan to install Grafana on the BigBlueButton host itself, keep in mind that the standard port for Grafana (3000) is also used by the html5-client of BigBlueButton (see /etc/bigbluebutton/nginx/bbb-html5.nginx ). In this case you will need to change the Grafana port in /etc/grafana/grafana.ini to something else, e.g. 3001).","title":"Installing Grafana on the BigBlueButton Server"},{"location":"support/","text":"Support # Read Installation instructions and the Getting Started guide Open an issue on the projects GitHub repository","title":"Support"},{"location":"support/#support","text":"Read Installation instructions and the Getting Started guide Open an issue on the projects GitHub repository","title":"Support"},{"location":"installation/all_in_one_monitoring_stack/","text":"All-In-One Monitoring Stack # If you do not have any monitoring infrastructure setup you can following these instructions to setup the entire monitoring stack on your BigBlueButton server. Monitoring Stack: BigBlueButton exporter Prometheus Grafana Grafana will be exposed through the system installed Nginx which will act as a TLS termination proxy. Prerequisites: Docker (you probably have this on your BigBlueButton server) docker-compose (recent version with compose file format version 3.2 support) Nginx (that has TLS configured) Warning Follow Docker's official installation instructions instead of installing docker-compose from Ubuntu's official repository since it is outdated and does not support compose file format v3.2 (as of April 29, 2020). Step-by-step Guide # 1. Create directory # mkdir ~/bbb-monitoring 2. Copy configuration files # Copy all the files in extras/all_in_one_monitoring to your server into ~/bbb-monitoring And replace all the references to example.com with your BigBlueButton domain. Note You will configure https://example.com/monitoring in step 5: Configure Nginx . 3. Add your secrets # Get your BBB secret by running: bbb-conf --secret Then fill out API_BASE_URL and API_SECRET in ~/bbb-monitoring/secrets.env with your details. Warning The API base url ends with /api/ (beware of the trailing slash!). bbb-conf --secret will return the base url but not the base API url which has a /api/ appended. 4. Start the services # cd ~/bbb-monitoring sudo docker-compose up -d 5. Configure Nginx # Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:3001 . # BigBlueButton monitoring location /monitoring/ { proxy_pass http://127.0.0.1:3001/; proxy_redirect default; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; include fastcgi_params; } Note If you would like to change the URL you will need to update the docker-compose grafana GF_SERVER_ROOT_URL env variable as well. Tip When upgrading BigBlueButton, the upgrade procedure will overwrite the contents of /etc/nginx/sites-available/bigbluebutton thereby causing you to lose access to your metrics. So after the upgrade od BigBlueButton you will need to add the location directive again. You could also add a seperate site configuration, but this will require you do point another domain to the server to do virtual hosting and acquire a seperate HTTPS certificate. 6. Setup Grafana # Login to Grafana (https://example.com/monitoring) in your web browser (admin:admin) and change the password . Add Prometheus as a data source ( Add data source -> Prometheus ) and entering the following configuration: URL: http://localhost:9090 Note The prometheus DNS entry will be resolved by Docker since Grafana is running within the same Docker network (our docker-compose configuration automates this). Now it is time to finally import the fancy dashboards. In the left menu click on + icon -> import In the JSON field copy/paste the contents of extras/dashboards/server_instace_netdata.json Grafana dashboard. You are done \ud83d\udc4f\ud83d\udc4f! Warning You can edit your dashboard as much as you like, but note that you will lose your changes if you will re-import updated versions of the dashboard. So you will have to manually patch the dashboard when we update the dashboard json files in the repository. Updates # Follow Installation of BigBlueButton Exporter -> Updates but instead of cd ~/bbb-exporter you will have to cd ~/bbb-monitoring . Check the releases for the rest of the services (Prometheus, Grafana & node_exporter) on their respected websites for details on the latest Docker image release tag.","title":"All-In-One Monitoring Stack"},{"location":"installation/all_in_one_monitoring_stack/#all-in-one-monitoring-stack","text":"If you do not have any monitoring infrastructure setup you can following these instructions to setup the entire monitoring stack on your BigBlueButton server. Monitoring Stack: BigBlueButton exporter Prometheus Grafana Grafana will be exposed through the system installed Nginx which will act as a TLS termination proxy. Prerequisites: Docker (you probably have this on your BigBlueButton server) docker-compose (recent version with compose file format version 3.2 support) Nginx (that has TLS configured) Warning Follow Docker's official installation instructions instead of installing docker-compose from Ubuntu's official repository since it is outdated and does not support compose file format v3.2 (as of April 29, 2020).","title":"All-In-One Monitoring Stack"},{"location":"installation/all_in_one_monitoring_stack/#step-by-step-guide","text":"","title":"Step-by-step Guide"},{"location":"installation/all_in_one_monitoring_stack/#1-create-directory","text":"mkdir ~/bbb-monitoring","title":"1. Create directory"},{"location":"installation/all_in_one_monitoring_stack/#2-copy-configuration-files","text":"Copy all the files in extras/all_in_one_monitoring to your server into ~/bbb-monitoring And replace all the references to example.com with your BigBlueButton domain. Note You will configure https://example.com/monitoring in step 5: Configure Nginx .","title":"2. Copy configuration files"},{"location":"installation/all_in_one_monitoring_stack/#3-add-your-secrets","text":"Get your BBB secret by running: bbb-conf --secret Then fill out API_BASE_URL and API_SECRET in ~/bbb-monitoring/secrets.env with your details. Warning The API base url ends with /api/ (beware of the trailing slash!). bbb-conf --secret will return the base url but not the base API url which has a /api/ appended.","title":"3. Add your secrets"},{"location":"installation/all_in_one_monitoring_stack/#4-start-the-services","text":"cd ~/bbb-monitoring sudo docker-compose up -d","title":"4. Start the services"},{"location":"installation/all_in_one_monitoring_stack/#5-configure-nginx","text":"Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:3001 . # BigBlueButton monitoring location /monitoring/ { proxy_pass http://127.0.0.1:3001/; proxy_redirect default; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; include fastcgi_params; } Note If you would like to change the URL you will need to update the docker-compose grafana GF_SERVER_ROOT_URL env variable as well. Tip When upgrading BigBlueButton, the upgrade procedure will overwrite the contents of /etc/nginx/sites-available/bigbluebutton thereby causing you to lose access to your metrics. So after the upgrade od BigBlueButton you will need to add the location directive again. You could also add a seperate site configuration, but this will require you do point another domain to the server to do virtual hosting and acquire a seperate HTTPS certificate.","title":"5. Configure Nginx"},{"location":"installation/all_in_one_monitoring_stack/#6-setup-grafana","text":"Login to Grafana (https://example.com/monitoring) in your web browser (admin:admin) and change the password . Add Prometheus as a data source ( Add data source -> Prometheus ) and entering the following configuration: URL: http://localhost:9090 Note The prometheus DNS entry will be resolved by Docker since Grafana is running within the same Docker network (our docker-compose configuration automates this). Now it is time to finally import the fancy dashboards. In the left menu click on + icon -> import In the JSON field copy/paste the contents of extras/dashboards/server_instace_netdata.json Grafana dashboard. You are done \ud83d\udc4f\ud83d\udc4f! Warning You can edit your dashboard as much as you like, but note that you will lose your changes if you will re-import updated versions of the dashboard. So you will have to manually patch the dashboard when we update the dashboard json files in the repository.","title":"6. Setup Grafana"},{"location":"installation/all_in_one_monitoring_stack/#updates","text":"Follow Installation of BigBlueButton Exporter -> Updates but instead of cd ~/bbb-exporter you will have to cd ~/bbb-monitoring . Check the releases for the rest of the services (Prometheus, Grafana & node_exporter) on their respected websites for details on the latest Docker image release tag.","title":"Updates"},{"location":"installation/bigbluebutton_exporter/","text":"Installation of BigBlueButton Exporter # Docker Installation (Recommended) # These instructions will guide you through the installation procedure for BigBlueButton Exporter on your BigBlueButton server and direct the HTTP basic auth protected endpoint /metrics/ to expose your BigBlueButtons server's metrics. We assume you have a working installation of BigBlueButton with Nginx as the reverse proxy already set up. Info HTTP Basic Auth is required because each request to the /metrics/ endpoint performs an API call to BigBlueButton which takes a couple of seconds. Prerequisite: Prometheus Docker docker-compose 1. Create directory # mkdir ~/bbb-exporter 2. Create docker-compose file # Copy extras/docker-compose.exporter.yaml to your BigBlueButton server into ~/bbb-exporter/docker-compose.yaml 3. Create secrets file # Take a note of your BigBlueButton's API base url and secret by running: bbb-conf --secret Then create the file ~/bbb-exporter/secrets.env and fill out the API_BASE_URL and API_SECRET variables with your details. API_BASE_URL=https://example.com/bigbluebutton/api/ API_SECRET=<secret> Warning The API base url ends with /api/ (beware of the trailing slash!). bbb-conf --secret will return the base url but not the base API url which has a /api/ appended. 4. Start the container # sudo docker-compose up -d The exporter should be running now. However you will not be able to access it externally because the docker-compose file binded the exporters port only to localhost. This is because we will use Nginx to act as a TLS termination proxy (reverse proxy with HTTPS support) 5. Create HTTP basic auth password # Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt-get install apache2-utils . Create a username (e.g. monitoring) and password. You will be prompted after you run the htpasswd command for the desired password. # You may replace monitoring with any desired username sudo htpasswd -c /etc/nginx/.htpasswd monitoring 6. Add Nginx site configuration # Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:9688 . # BigBlueButton Exporter (metrics) location /metrics/ { auth_basic \"BigBlueButton\"; # The contents of this can be anything auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://127.0.0.1:9688/; proxy_redirect default; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; include fastcgi_params; } Tip When upgrading BigBlueButton, the upgrade procedure will overwrite the contents of /etc/nginx/sites-available/bigbluebutton thereby causing you to lose access to your metrics. So after the upgrade od BigBlueButton you will need to add the location directive again. You could also add a seperate site configuration, but this will require you do point another domain to the server to do virtual hosting and acquire a seperate HTTPS certificate. 7. Reload Nginx and test # First check if your Nginx configuration is syntactically valid: sudo nginx -t If everything is okay reload Nginx: sudo systemctl reload nginx Now you can try accessing the metrics on /metrics and typing in your username/password that you choose in 5. Create HTTP basic auth password You should get the raw metrics in the Prometheus format. 8. Add the exporter to your Prometheus configuration # Now all that is left is to point your Prometheus to the exporter. In your prometheus.yaml configuration add a new job specifying the target (url of the exporter) and HTTP basic auth credentials. Replace example.com with your BigBlueButton's domain. - job_name: 'bbb' scrape_interval: 5s scheme: https basic_auth: username: \"<HTTP BASIC AUTH USERNAME>\" password: \"<HTTP BASIC AUTH PASSWORD>\" static_configs: - targets: ['example.com'] Tip You can scrape multiple exporters using a single job rule if they all have the same HTTP basic auth username/password. Updates # To update your BigBlueButton exporter all you have to do is change the docker image tag to the latest release (see releases or Docker image tags ) in ~/bbb-exporter/docker-compose.yaml and re-create the docker container by running: cd ~/bbb-exporter docker-compose up -d Since the container doesn't store anything it is safe to destroy the container. We recommend you \"watch\" on GitHub the projects repository to be notified on new releases. This way you will be always notified when a new update for BigBlueButton Exporter is available. Systemd Installation # TODO Notes # Multiple BigBlueButton Servers # You will need to install BigBlueButton Exporter on each server (steps 1-7) and then just add the server's domain to your Prometheus bbb job target list.","title":"BigBlueButton Exporter"},{"location":"installation/bigbluebutton_exporter/#installation-of-bigbluebutton-exporter","text":"","title":"Installation of BigBlueButton Exporter"},{"location":"installation/bigbluebutton_exporter/#docker-installation-recommended","text":"These instructions will guide you through the installation procedure for BigBlueButton Exporter on your BigBlueButton server and direct the HTTP basic auth protected endpoint /metrics/ to expose your BigBlueButtons server's metrics. We assume you have a working installation of BigBlueButton with Nginx as the reverse proxy already set up. Info HTTP Basic Auth is required because each request to the /metrics/ endpoint performs an API call to BigBlueButton which takes a couple of seconds. Prerequisite: Prometheus Docker docker-compose","title":"Docker Installation (Recommended)"},{"location":"installation/bigbluebutton_exporter/#1-create-directory","text":"mkdir ~/bbb-exporter","title":"1. Create directory"},{"location":"installation/bigbluebutton_exporter/#2-create-docker-compose-file","text":"Copy extras/docker-compose.exporter.yaml to your BigBlueButton server into ~/bbb-exporter/docker-compose.yaml","title":"2. Create docker-compose file"},{"location":"installation/bigbluebutton_exporter/#3-create-secrets-file","text":"Take a note of your BigBlueButton's API base url and secret by running: bbb-conf --secret Then create the file ~/bbb-exporter/secrets.env and fill out the API_BASE_URL and API_SECRET variables with your details. API_BASE_URL=https://example.com/bigbluebutton/api/ API_SECRET=<secret> Warning The API base url ends with /api/ (beware of the trailing slash!). bbb-conf --secret will return the base url but not the base API url which has a /api/ appended.","title":"3. Create secrets file"},{"location":"installation/bigbluebutton_exporter/#4-start-the-container","text":"sudo docker-compose up -d The exporter should be running now. However you will not be able to access it externally because the docker-compose file binded the exporters port only to localhost. This is because we will use Nginx to act as a TLS termination proxy (reverse proxy with HTTPS support)","title":"4. Start the container"},{"location":"installation/bigbluebutton_exporter/#5-create-http-basic-auth-password","text":"Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt-get install apache2-utils . Create a username (e.g. monitoring) and password. You will be prompted after you run the htpasswd command for the desired password. # You may replace monitoring with any desired username sudo htpasswd -c /etc/nginx/.htpasswd monitoring","title":"5. Create HTTP basic auth password"},{"location":"installation/bigbluebutton_exporter/#6-add-nginx-site-configuration","text":"Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:9688 . # BigBlueButton Exporter (metrics) location /metrics/ { auth_basic \"BigBlueButton\"; # The contents of this can be anything auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://127.0.0.1:9688/; proxy_redirect default; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; include fastcgi_params; } Tip When upgrading BigBlueButton, the upgrade procedure will overwrite the contents of /etc/nginx/sites-available/bigbluebutton thereby causing you to lose access to your metrics. So after the upgrade od BigBlueButton you will need to add the location directive again. You could also add a seperate site configuration, but this will require you do point another domain to the server to do virtual hosting and acquire a seperate HTTPS certificate.","title":"6. Add Nginx site configuration"},{"location":"installation/bigbluebutton_exporter/#7-reload-nginx-and-test","text":"First check if your Nginx configuration is syntactically valid: sudo nginx -t If everything is okay reload Nginx: sudo systemctl reload nginx Now you can try accessing the metrics on /metrics and typing in your username/password that you choose in 5. Create HTTP basic auth password You should get the raw metrics in the Prometheus format.","title":"7. Reload Nginx and test"},{"location":"installation/bigbluebutton_exporter/#8-add-the-exporter-to-your-prometheus-configuration","text":"Now all that is left is to point your Prometheus to the exporter. In your prometheus.yaml configuration add a new job specifying the target (url of the exporter) and HTTP basic auth credentials. Replace example.com with your BigBlueButton's domain. - job_name: 'bbb' scrape_interval: 5s scheme: https basic_auth: username: \"<HTTP BASIC AUTH USERNAME>\" password: \"<HTTP BASIC AUTH PASSWORD>\" static_configs: - targets: ['example.com'] Tip You can scrape multiple exporters using a single job rule if they all have the same HTTP basic auth username/password.","title":"8. Add the exporter to your Prometheus configuration"},{"location":"installation/bigbluebutton_exporter/#updates","text":"To update your BigBlueButton exporter all you have to do is change the docker image tag to the latest release (see releases or Docker image tags ) in ~/bbb-exporter/docker-compose.yaml and re-create the docker container by running: cd ~/bbb-exporter docker-compose up -d Since the container doesn't store anything it is safe to destroy the container. We recommend you \"watch\" on GitHub the projects repository to be notified on new releases. This way you will be always notified when a new update for BigBlueButton Exporter is available.","title":"Updates"},{"location":"installation/bigbluebutton_exporter/#systemd-installation","text":"TODO","title":"Systemd Installation"},{"location":"installation/bigbluebutton_exporter/#notes","text":"","title":"Notes"},{"location":"installation/bigbluebutton_exporter/#multiple-bigbluebutton-servers","text":"You will need to install BigBlueButton Exporter on each server (steps 1-7) and then just add the server's domain to your Prometheus bbb job target list.","title":"Multiple BigBlueButton Servers"},{"location":"installation/netdata/","text":"Netdata # Follow these instructions in order to view system resource utilization with the server_instace_netdata.yaml Grafana dashboard. Instructions bellow will configure Netdata to bind to localhost and configure Nginx as a reverse proxy that will expose Netdata via a location directive with HTTP basic auth. Step-by-step Guide # This guide is built upon https://docs.netdata.cloud/backends/prometheus/ . 1. Install Netdata # Follow Netdata's official instruction on how to install Netdata: https://docs.netdata.cloud/packaging/installer/ . 2. Configure Netdata to bind to localhost # Find the [web] section and make sure bind to = 127.0.0.1 . cd /etc/netdata sudo ./edit-config netdata.conf 3. Create HTTP basic auth password # Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt-get install apache2-utils . Create a username (e.g. monitoring) and password. You will be prompted after you run the htpasswd command for the desired password. Tip The username and password combo doesn't need to be the same as the one for the exporter. # You may replace monitoring with any desired username sudo htpasswd -c /etc/nginx/.htpasswd monitoring 6. Add Nginx site configuration # Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:19999 . # Netdata Monitoring location /netdata/ { proxy_pass http://127.0.0.1:19999/; proxy_redirect default; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; include fastcgi_params; } 7. Add Netdata to your Prometheus scrape jobs # Add the following job to your Prometheus configuration. Replace example.com with your BigBlueButton's domain. - job_name : 'bbb_netdata' metrics_path : '/netdata/api/v1/allmetrics' params : format : [ prometheus ] honor_labels : true scheme : https static_configs : - targets : [ 'example.com' ] Notes # Multiple BigBlueButton servers # If you wish to monitor multiple BigBlueButton servers simply do steps 1-6 for each server and then add each server's domain to the targets field in Prometheuses bbb_netdata job configuration. Setup Netdata without the Nginx reverse proxy # In the case you do not wish to deploy your Netdata behind the Nginx reverse proxy, you either need to fix the Server Instance Grafana Dashboard (not recommended) or add a Prometheus relabel config. Thank you to @robbi5 for providing this snippet: relabel_configs : - source_labels : [ '__address__' ] separator : ':' regex : '(.*):.*' target_label : 'instance' replacement : '$1' See issue #3 for more details.","title":"Netdata"},{"location":"installation/netdata/#netdata","text":"Follow these instructions in order to view system resource utilization with the server_instace_netdata.yaml Grafana dashboard. Instructions bellow will configure Netdata to bind to localhost and configure Nginx as a reverse proxy that will expose Netdata via a location directive with HTTP basic auth.","title":"Netdata"},{"location":"installation/netdata/#step-by-step-guide","text":"This guide is built upon https://docs.netdata.cloud/backends/prometheus/ .","title":"Step-by-step Guide"},{"location":"installation/netdata/#1-install-netdata","text":"Follow Netdata's official instruction on how to install Netdata: https://docs.netdata.cloud/packaging/installer/ .","title":"1. Install Netdata"},{"location":"installation/netdata/#2-configure-netdata-to-bind-to-localhost","text":"Find the [web] section and make sure bind to = 127.0.0.1 . cd /etc/netdata sudo ./edit-config netdata.conf","title":"2. Configure Netdata to bind to localhost"},{"location":"installation/netdata/#3-create-http-basic-auth-password","text":"Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt-get install apache2-utils . Create a username (e.g. monitoring) and password. You will be prompted after you run the htpasswd command for the desired password. Tip The username and password combo doesn't need to be the same as the one for the exporter. # You may replace monitoring with any desired username sudo htpasswd -c /etc/nginx/.htpasswd monitoring","title":"3. Create HTTP basic auth password"},{"location":"installation/netdata/#6-add-nginx-site-configuration","text":"Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:19999 . # Netdata Monitoring location /netdata/ { proxy_pass http://127.0.0.1:19999/; proxy_redirect default; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; include fastcgi_params; }","title":"6. Add Nginx site configuration"},{"location":"installation/netdata/#7-add-netdata-to-your-prometheus-scrape-jobs","text":"Add the following job to your Prometheus configuration. Replace example.com with your BigBlueButton's domain. - job_name : 'bbb_netdata' metrics_path : '/netdata/api/v1/allmetrics' params : format : [ prometheus ] honor_labels : true scheme : https static_configs : - targets : [ 'example.com' ]","title":"7. Add Netdata to your Prometheus scrape jobs"},{"location":"installation/netdata/#notes","text":"","title":"Notes"},{"location":"installation/netdata/#multiple-bigbluebutton-servers","text":"If you wish to monitor multiple BigBlueButton servers simply do steps 1-6 for each server and then add each server's domain to the targets field in Prometheuses bbb_netdata job configuration.","title":"Multiple BigBlueButton servers"},{"location":"installation/netdata/#setup-netdata-without-the-nginx-reverse-proxy","text":"In the case you do not wish to deploy your Netdata behind the Nginx reverse proxy, you either need to fix the Server Instance Grafana Dashboard (not recommended) or add a Prometheus relabel config. Thank you to @robbi5 for providing this snippet: relabel_configs : - source_labels : [ '__address__' ] separator : ':' regex : '(.*):.*' target_label : 'instance' replacement : '$1' See issue #3 for more details.","title":"Setup Netdata without the Nginx reverse proxy"},{"location":"installation/node_exporter/","text":"node_exporter # Coming soon. TODO","title":"node_exporter"},{"location":"installation/node_exporter/#node_exporter","text":"Coming soon. TODO","title":"node_exporter"}]}